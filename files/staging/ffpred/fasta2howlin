#! /usr/bin/gawk -f

# /usr/cbs/packages/netOglyc/3.1/netOglyc-3.1b/bin/fasta2howlin
# 
# This script is a part of NetOGlyc 3.1; it is called by the main 'netOglyc'
# script. It takes FASTA format at input and performs the following:
# 
# 1. generation of HOWLINFILE1 (general), one line for each S/T, containing:
#    A. values for S or T from BLOSUM62 matrix (21 values: 20 aa + '-');
#    B. aa freqs in a window of 31 (21 values: 20 aa + '-');
#    C. surf pred by JH 12+1+12 average, one value
#    D. "0" (fake answer, needed by HOWLIN);
#    E. unique line identifier in the form e_name=[ST]=seq_pos
# 2. generation of HOWLINFILE2 (isolated sites), one line for each S/T,
#    containing:
#    A. values from BLOSUM62 matrix for the surroundings of each site
#       (21 values: 20 aa + '-')*(4+1+4)=21*9=189;
#    B. aa freqs not used;
#    C. surf pred by JH 8+1+8 average, one value
#    D. "0" (fake answer, needed by HOWLIN);
#    E. unique line identifier in the form e_name=[ST]=seq_pos
# 3. generation of FASTA file to be used in output generation,
#    to OUT/infile.fsa

BEGIN {

  NEUTRAL	= "X";			# unknown aa symbol
  FLANKSEQ	= "---------------";	# 15 aa flank
  FLANK		= length(FLANKSEQ);

  WINDOW	= FLANK*2+1;		# sequence window to consider

  # rows in BLOSUM62 (from KJ)
  BLOSUM62["A"] = \
     " 4 -1 -2 -2  0 -1 -1  0 -2 -1 -1 -1 -1 -2 -1  1  0 -3 -2  0 0 "
  BLOSUM62["R"] = \
     "-1  5  0 -2 -3  1  0 -2  0 -3 -2  2 -1 -3 -2 -1 -1 -3 -2 -3 0 "
  BLOSUM62["N"] = \
     "-2  0  6  1 -3  0  0  0  1 -3 -3  0 -2 -3 -2  1  0 -4 -2 -3 0 "
  BLOSUM62["D"] = \
     "-2 -2  1  6 -3  0  2 -1 -1 -3 -4 -1 -3 -3 -1  0 -1 -4 -3 -3 0 "
  BLOSUM62["C"] = \
     " 0 -3 -3 -3  9 -3 -4 -3 -3 -1 -1 -3 -1 -2 -3 -1 -1 -2 -2 -1 0 "
  BLOSUM62["Q"] = \
     "-1  1  0  0 -3  5  2 -2  0 -3 -2  1  0 -3 -1  0 -1 -2 -1 -2 0 "
  BLOSUM62["E"] = \
     "-1  0  0  2 -4  2  5 -2  0 -3 -3  1 -2 -3 -1  0 -1 -3 -2 -2 0 "
  BLOSUM62["G"] = \
     " 0 -2  0 -1 -3 -2 -2  6 -2 -4 -4 -2 -3 -3 -2  0 -2 -2 -3 -3 0 "
  BLOSUM62["H"] = \
     "-2  0  1 -1 -3  0  0 -2  8 -3 -3 -1 -2 -1 -2 -1 -2 -2  2 -3 0 "
  BLOSUM62["I"] = \
     "-1 -3 -3 -3 -1 -3 -3 -4 -3  4  2 -3  1  0 -3 -2 -1 -3 -1  3 0 "
  BLOSUM62["L"] = \
     "-1 -2 -3 -4 -1 -2 -3 -4 -3  2  4 -2  2  0 -3 -2 -1 -2 -1  1 0 "
  BLOSUM62["K"] = \
     "-1  2  0 -1 -3  1  1 -2 -1 -3 -2  5 -1 -3 -1  0 -1 -3 -2 -2 0 "
  BLOSUM62["M"] = \
     "-1 -1 -2 -3 -1  0 -2 -3 -2  1  2 -1  5  0 -2 -1 -1 -1 -1  1 0 "
  BLOSUM62["F"] = \
     "-2 -3 -3 -3 -2 -3 -3 -3 -1  0  0 -3  0  6 -4 -2 -2  1  3 -1 0 "
  BLOSUM62["P"] = \
     "-1 -2 -2 -1 -3 -1 -1 -2 -2 -3 -3 -1 -2 -4  7 -1 -1 -4 -3 -2 0 "
  BLOSUM62["S"] = \
     " 1 -1  1  0 -1  0  0  0 -1 -2 -2  0 -1 -2 -1  4  1 -3 -2 -2 0 "
  BLOSUM62["T"] = \
     " 0 -1  0 -1 -1 -1 -1 -2 -2 -1 -1 -1 -1 -2 -1  1  5 -2 -2  0 0 "
  BLOSUM62["W"] = \
     "-3 -3 -4 -4 -2 -2 -3 -2 -2 -3 -2 -3 -1  1 -4 -3 -2 11  2 -3 0 "
  BLOSUM62["Y"] = \
     "-2 -2 -2 -3 -2 -1 -2 -3  2 -1 -1 -2 -1  3 -3 -2 -2  2  7 -1 0 "
  BLOSUM62["V"] = \
     " 0 -3 -3 -3 -1 -2 -2 -3 -3  3  1 -2  1 -1 -2 -2  0 -3 -1  4 0 "
  BLOSUM62["X"] = \
     " 0 -1 -1 -1 -2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -2  0  0 -2 -1 -1 0 "
  BLOSUM62["-"] = \
     " 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 1 "

  TMPFILE	= (OUT "/tmp.fsa");		# FASTA file, one entry
  OUTFILE	= (OUT "/infile.fsa");		# FASTA file, final
  HOWLINFILE1	= (OUT "/infile.howlin");	# HOWLIN file, general
  HOWLINFILE2	= (OUT "/infile2.howlin");	# HOWLIN file, isolated sites

}

# header line =================================================================
/^>/ {	if ( seq != "" )		# process previous entry
	   printlines();
	seq = "";			# reset sequence

	name = substr($1,2);		# get name
	ec++;
	if ( name == "" )
	   name = ("seq." ec); 

	next; }

# sequence line ===============================================================
{
  seq = ( seq $0 );
}

END {	if ( seq != "" )
	   printlines();
}

# HOWLIN line generation ======================================================
function printlines() {

  # write FASTA entry
  len = length(seq);
  print ">" name,len >TMPFILE;
  for (i=1; i<=len; i+=80)
      print substr(seq,i,80) >TMPFILE;
  close(TMPFILE);

  # run surface prediction
  cmd = (ENVIRON["AWK"] " -v N=" name " '$1==N{print $5;}' surfg.out");
  i=0;
  while ( cmd | getline surfpred[++i] );
  if ( i != len+1 ) {
     print "netOglyc: surface prediction failed in entry",name;
     exit;
  }
  close(cmd);
  for (j=1; j<=FLANK; j++)		# reset right flank (bugfix 05-09-30)
      surfpred[j+len] = 0;

  # append to FASTA file
  system("cat " TMPFILE " >>" OUTFILE);

  fakelen = len + FLANK;
  seq = (FLANKSEQ seq FLANKSEQ);	# add flank

  # parse windows .............................................................
  for (i=16; i<=fakelen; i++) {		# for each element:
      curre = substr(seq,i,1);
      if ( match(curre,"[ST]") ) {		# if S or T:

         ### writing to HOWLINEFILE1 (general) ################################
         window = WINDOW;

         # PART 1A: BLOSUM62 line
         printf("%s",BLOSUM62[curre]) >HOWLINFILE1;

         # PART 1B: calculate aa distribution in window
         for (j=1; j<=21; j++)			# ... reset
	     sum[j]=0;
	 for (j=-FLANK; j<=FLANK; j++) {	# ... load
	     a = index("ARNDCQEGHILKMFPSTWYV-X",substr(seq,i+j,1));
	     if (a==22)
	        window--;
	     else
	        sum[a]++;
	 }
	 for (j=1; j<=21; j++)			# ... print	
	     printf(" %.4g",sum[j]/window) >HOWLINFILE1;

	 # PART 1C: calculate surface score average
	 surfsum=0;
	 for (j=i-FLANK-12; j<=i-FLANK+12; j++)
	     surfsum+=surfpred[j];
	 printf(" %8.6f",surfsum/25) >HOWLINFILE1;

         # PART 1D+E: add extra '0' and name
         print " 0 " name "=" curre "=" i-FLANK >HOWLINFILE1;

         ### writing to HOWLINEFILE2 (isolated sites) #########################
         window = WINDOW;

         # PART 2A: BLOSUM62 line
	 for (j=-4; j<=4; j++)
             printf("%s",BLOSUM62[substr(seq,i+j,1)]) >HOWLINFILE2;

         # PART 2B: aa distribution not used here

	 # PART 2C: calculate surface score average
	 surfsum=0;
	 for (j=i-FLANK-8; j<=i-FLANK+8; j++)
	     surfsum+=surfpred[j];
	 printf(" %8.6f",surfsum/17) >HOWLINFILE2;

         # PART 2D+E: add extra '0' and name
         print " 0 " name "=" curre "=" i-FLANK >HOWLINFILE2;

      } # if S or T ...
  } # for each element ...

}

# end of script ===============================================================
