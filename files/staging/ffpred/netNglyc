#! /bin/tcsh -f

#
# NetNGlyc 1.0c
#
# Changes:	 6 Oct 2001	-	launch, Ramneek Gupta
# 		10 Dec 2002	1.0	packaging completed, K. Rapacki
# 		20 Jul 2004	1.0a	bug fixes, see README
# 		19 Sep 2011	1.0b	bug fixes, see README
# 		 8 Nov 2011	1.0c	bug fixes, see README
#

# *****************************************************************************
# ******* *******            EDIT TO SUIT YOUR SITE             ******* *******
# *****************************************************************************

# full path to the NetNGlyc-1.0 directory (mandatory)
setenv	GLYCHOME	/opt/netNglyc-1.0

# determine platform (do not change this unless you don't have 'uname'!)
setenv	SYSTEM		`uname -s`

# configure auxiliary software (see installation instructions)
if (( $SYSTEM == "IRIX" ) || ( $SYSTEM == "IRIX64" )) then # typical IRIX

   setenv AWK /usr/freeware/bin/gawk
   setenv PERL /usr/bin/perl
   setenv ECHO /sbin/echo
   setenv GETSPROT /usr/local/bin64/getsprot
   setenv SIGNALP /usr/cbs/bio/bin/signalp
   setenv GNUPLOT /usr/freeware/bin/gnuplot
   setenv PPM2GIF /usr/freeware/bin/ppmtogif

else if ( $SYSTEM == "Linux" ) then		# typical Linux

   setenv AWK /usr/bin/gawk
   setenv PERL /usr/bin/perl
   setenv ECHO "/bin/echo -e"
   #setenv GETSPROT /usr/local/bin64/getsprot
   setenv SIGNALP /opt/signalp-4.1/signalp
   setenv GNUPLOT /usr/bin/gnuplot
   setenv PPM2GIF /usr/bin/ppmtogif

else						# edit to suit your UNIX

   setenv AWK /usr/bin/nawk
   setenv PERL /usr/bin/perl
   setenv ECHO /sbin/echo
   setenv GETSPROT /usr/local/bin64/getsprot
   setenv SIGNALP /usr/cbs/bio/bin/signalp
   setenv GNUPLOT /usr/freeware/bin/gnuplot
   setenv PPM2GIF /usr/freeware/bin/ppmtogif

endif

# *****************************************************************************
# ******* *******      NO CHANGES EXPECTED BELOW THIS LINE      ******* *******
# *****************************************************************************

setenv	VER		1.0c
setenv	VERDATE		"Oct 2001, revised in Jul 2004, Sep and Nov 2011"

setenv	GLYCBIN		${GLYCHOME}/bin
setenv	GLYCETC		${GLYCHOME}/etc
setenv	GLYCHOW		${GLYCHOME}/how
setenv	GLYCTMP		${GLYCHOME}/tmp/netNglyc-$$

setenv	LANG		C	# else AWK will not work ...

set	i_opt					# default: no Swiss_Prot ID/AC
set	infile		= ()			# default: no file, read stdin

set	ending		= s		# plural ending for multiple sequences

set	here		= $cwd/		# take note of where we are

# configured correctly? =======================================================
if ( ! -x `echo $ECHO | sed 's/ .*//'`) then
   echo netNglyc: ECHO is not configured correctly
   exit -1
else if ( ! -e $GLYCHOME ) then
   $ECHO netNglyc: GLYCHOME is not configured correctly
   exit -2
else if ( ! -x $AWK ) then
   $ECHO netNglyc: AWK is not configured correctly
   exit -3
else if ( ! -x $PERL ) then
   $ECHO netNglyc: PERL is not configured correctly
   exit -4
endif

setenv WWWHOME /usr/opt/www/pub/CBS/services/NetNGlyc/tmp/
setenv WWWROOT http://www.cbs.dtu.dk/
setenv GR_PREFIX services/NetNGlyc/tmp/

# command line ================================================================
while ( $#argv )			# options: "afghi:V"
      switch ($1)
      case '-a':			# additional thresholds
              set a_opt
      breaksw
      case '-f':			# full scope: predict on all N:s
              set f_opt
      breaksw
      case '-g':			# graphics
              set g_opt
      breaksw
      case '-h':			# help
              set h_opt
      breaksw
      case '-i':			# Swiss-Prot ID/AC
              shift
              set i_opt = $1
      breaksw
      #case '-m':			# mail server
      #        set m_opt
      #breaksw
      case '-w':			# www server
              set w_opt
      breaksw
      case '-V':			# print version and exit
              set V_opt
      breaksw
      default:				# input file(s)
              set infile = ($infile $1)
      breaksw
      endsw
      shift
end

# called correctly? ===========================================================

# administative: no computation
if ( $?h_opt ) then
   if ( $?m_opt ) then
      $ECHO netNglyc: mail server help not implemented yet
   else
      $ECHO usage: netNglyc \[-a\] \[-f\] \[-g\] \[-h\]\
		\[-i ID\] \[-V\] \[file\] ...
   endif
   exit 0
else if ( $?V_opt ) then
   $ECHO netNGlyc $VER, $VERDATE
   exit 0
endif

# graphics
if ( $?g_opt ) then
   if ( ! -x $GNUPLOT ) then
      $ECHO netNglyc: GNUPLOT not found, -g option will not work
      unset g_opt
   endif
endif

# check input files
foreach fl ($infile)
   if ( ! -e $fl ) then
      $ECHO netNglyc: cannot open \"$fl\"
      exit -5
   endif
end

mkdir $GLYCTMP		### Ol Korrekt ... ###

# prepare input file ==========================================================

# Swiss-Prot ID/AC ............................................................
if ( $i_opt != "" ) then
   if ( ! $?GETSPROT ) then
      $ECHO netNglyc: Swiss-Prot extraction is not configured
		cd /
		rm -rf $GLYCTMP
      exit -6
   else if ( ! -x $GETSPROT ) then
      $ECHO netNglyc: cannot execute \"$GETSPROT\"
		cd /
		rm -rf $GLYCTMP
      exit -7
   endif
   set sprotid = `echo $i_opt | tr '[a-z]' '[A-Z]'`
   $GETSPROT $sprotid > $GLYCTMP/$sprotid.sp
   if ( -z $GLYCTMP/$sprotid.sp ) then			# entry not found
      $ECHO netNglyc: Swiss-Prot ID/AC \"$sprotid\" not found
		cd /
		rm -rf $GLYCTMP
      exit -8
   else
      $AWK -f $GLYCBIN/sp2fasta $GLYCTMP/$sprotid.sp >$GLYCTMP/infile.fas
   endif
endif

# input file in FASTA .........................................................
if (( ! -e $GLYCTMP/infile.fas ) || $#infile ) then
   cat $infile >>$GLYCTMP/infile.fas
endif

# asparagine check ............................................................
if (! `$AWK '/^>/{next;}/[Nn]/{print "1";exit;}' $GLYCTMP/infile.fas`) then
   echo No Asparagines in the input sequence$ending '! \n'
   echo N-glycosylation is only predicted on Asn residues
   echo thus the prediction was not made.
	cd /
	rm -rf $GLYCTMP
   exit -9
endif

# convert to HOW and count ....................................................
$AWK -f $GLYCBIN/fasta2how $GLYCTMP/infile.fas >$GLYCTMP/test.how
set infile = $GLYCTMP/test.how
@ ecount = `grep '^[ 1-9]' $infile | wc -l`
if ( $ecount == 0 ) then
	cd /
	rm -rf $GLYCTMP
   exit 0
else if ( $ecount == 1 ) then
   set ending
endif


# MAIN ========================================================================

cd $GLYCTMP
# prepare list of entry names .................................................
set hownames	= (`$AWK '/^ /{print $2;}' $infile`)
set hownamesu	= (`$AWK '/^ /{print $2;}' $infile | sort -u`)
if ( $#hownames > $#hownamesu ) then
   $ECHO netNglyc: input sequence names are not unique
	cd /
	rm -rf $GLYCTMP
   exit -10
endif
echo $hownames | tr ' ' '\n' >$GLYCTMP/hownames

if ( $?w_opt ) then
   $ECHO -n '<p></b>     'Asn-Xaa-Ser/Thr sequons in the sequence output below
   $ECHO ' are highlighted in <font color="#0000ff"><b>blue</b></font>'.
   $ECHO -n '          Asparagines' predicted to be N-glycosylated are
   $ECHO ' highlighted in <font color="#ff0000"><b>red</font>.\n'
else
   $ECHO "# Predictions for N-Glycosylation sites in $ecount sequence$ending"
endif

# run SignalP .................................................................
if ( $?SIGNALP ) then
   if ( -x $SIGNALP ) then
      ($SIGNALP -t euk -m nn -trunc 60 -short $GLYCTMP/infile.fas \
       >$GLYCTMP/signalp.out; \
       touch $GLYCTMP/signalp.done &)
   else
      touch signalp.done
   endif
else
   touch signalp.done
endif

# run N-glyc networks .........................................................
foreach i (`ls $GLYCHOME/Template`)
   ln -s $GLYCHOME/Template/$i .
end
$PERL ./test > test.out

# post-process HOW output .....................................................
if ( $?f_opt ) then	# full scope
   $AWK -v allN=1 -f $GLYCBIN/pp-nglyc test.out >$GLYCTMP/final
   $AWK -v allN=0 -f $GLYCBIN/pp-nglyc test.out > $GLYCTMP/onlyNXST-final
else
   $AWK -v allN=0 -f $GLYCBIN/pp-nglyc test.out > $GLYCTMP/final
   ln -s $GLYCTMP/final $GLYCTMP/onlyNXST-final
endif

### $GLYCTMP/onlyNXST-final is for printing assignments in HOW format ###

# wait for SignalP to terminate ...............................................
wait
while ( ! -e $GLYCTMP/signalp.done )
#     echo -n Waiting for SignalP predictions .... \\r
      sleep 1
end

# OUTPUT ======================================================================
@ i = 1

foreach entry ($hownames)

   if ($?w_opt) then
      $ECHO '</pre><p><h2>'Output for \'$entry\''</h2><pre>'
   endif

   # check signal peptide presence
   if ( ! -e $GLYCTMP/signalp.out ) then
      $ECHO '\n'netNglyc: SignalP is not configured, no signal peptide \
         predictions are made'\n'
   else
      set sp_present = \
       `$AWK -v ent=$entry '$1==ent {print ($14=="Y");}' $GLYCTMP/signalp.out`
      if (! $sp_present) then
         cat $GLYCETC/nosignalp.txt
	 $ECHO -n "  "
	 $AWK -v ent=$entry '$1==ent {print;}' $GLYCTMP/signalp.out
	 $ECHO -n "\n    SignalP output is explained at "
	 if ($?w_opt) then
	    $ECHO -n '<a href="/services/SignalP/output.html">'
	    $ECHO 'http://www.cbs.dtu.dk/services/SignalP/output.html</a>'
	 else
	    $ECHO http://www.cbs.dtu.dk/services/SignalP/output.html
	 endif
	 cat $GLYCETC/nosignalp_foot.txt
      endif
   endif

   # get predicted locations ..................................................
   set nloc = `grep ^$entry' .*\+ ' $GLYCTMP/final | $AWK '{print $2;}'`
   set Nloc = `echo $nloc | tr ' ' ','`

   set gloc = `grep ^$entry' .*\+ ' $GLYCTMP/onlyNXST-final | $AWK '{print $2;}'`
   set Gloc = `echo $gloc | tr ' ' ','`

   set NXSTloc = `$AWK -v E=$entry '$1==E {print $2;}' $GLYCTMP/onlyNXST-final`

   # print sequence and assignments ...........................................
   $AWK -f $GLYCBIN/gethow -v N=$entry $infile | \
      $AWK '/^ /{print "Name: ",$2,"\tLength: ",$1}' | \
      tee ${GLYCTMP}/graph.raw.dat \
      >>$GLYCTMP/prebuffered.txt
   $AWK -f $GLYCBIN/gethow -v N=$entry $infile | \
      $AWK -f $GLYCBIN/gethow -v B=${Nloc}:n | \
      $AWK -f $GLYCBIN/gethow -v B=${Gloc}:N | \
      grep -v '^ '  \
      >>${GLYCTMP}/prebuffered.txt
   $ECHO >>${GLYCTMP}/prebuffered.txt

   # print headings ...........................................................
   $ECHO '(Threshold=0.5)' >>$GLYCTMP/prebuffered.txt
   if ( $#nloc || $#gloc ) then
      cat $GLYCETC/table_head.$?w_opt.txt >>$GLYCTMP/prebuffered.txt

      grep "^$entry " $GLYCTMP/final >>$GLYCTMP/prebuffered.txt
      grep "^$entry " $GLYCTMP/final >>$GLYCTMP/graph.raw.dat

      cat $GLYCETC/table_foot.txt >>$GLYCTMP/prebuffered.txt
   else
      $ECHO '\nNo sites predicted in this sequence.\n' \
         >>${GLYCTMP}/prebuffered.txt
   endif

   # if WWW, then colour output - the 'rg' special Mar 2002.
   if ( $?w_opt ) then
      $GLYCBIN/colour $entry ${GLYCTMP} #/prebuffered.txt
      set here = $WWWHOME/$$.		# location for graphics files
   else
      cat ${GLYCTMP}/prebuffered.txt | $AWK -v E=$entry '\
         $1==E {printf("%-12s %5d %s\t\t%6.4f\t\t%s\t\t%4s\n",$1,$2,$3,$4,$5,$6);next}\
	 {print;}'
   endif

   # generate graphics ........................................................
   if ( $?g_opt ) then
      rm -f $GLYCTMP/graph.dat				# PostScript
      cat graph.raw.dat | \
         $AWK -f $GLYCBIN/mkgraph -v GRDAT=$GLYCTMP/graph.dat -v ADDT=$?a_opt \
	 >$GLYCTMP/graph.gnu
      $GNUPLOT $GLYCTMP/graph.gnu >${here}seq$i.eps

      rm -f $GLYCTMP/graph.dat				# GIF
      cat graph.raw.dat | \
         $AWK -f $GLYCBIN/mkgraph -v GRDAT=$GLYCTMP/graph.dat -v ADDT=$?a_opt \
	    -v GIF=1 -v PPM2GIF=$PPM2GIF \
	 >$GLYCTMP/graph.gnu
      $GNUPLOT $GLYCTMP/graph.gnu >${here}seq$i.gif

      if ( $?w_opt ) then				# link graphics
         $ECHO '</pre><p><br>'
         $ECHO '<img src="'$WWWROOT/$GR_PREFIX/$$.seq$i.gif'">'
         $ECHO '<a href="'$WWWROOT/$GR_PREFIX/$$.seq$i.eps'"><br>'
         $ECHO '<b>Graphics in PostScript</b></a>'
         $ECHO '<br><br><br><pre>'
      endif

   endif

   # clean entry dependent files ..............................................
   @ i++
   rm -f surfg.done netphos.done prebuffered.txt

end # for each entry ...

# cleanup =====================================================================
cd ..
rm -r $GLYCTMP

# end of script ===============================================================
