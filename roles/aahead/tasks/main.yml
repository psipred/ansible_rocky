---

  - name: "Add {{ django_aa_user }} user"
    user:
      name: "{{ django_aa_user }}"
      password: "{{ django_aa_hashed_password }}"
      group: apache
    become_user: root
    become_method: sudo

  - name: Check if we have aa_env
    stat: "path={{ django_aa_home }}/aa_env"
    become_user: root
    register: aa_env_exist

  - name: Create the aa head virtualenv
    become_user: "{{ django_aa_user }}"
    command: virtualenv aa_env -p /bin/python3
    when: aa_env_exist.stat.exists == False
    args:
        chdir: "{{ django_aa_home }}"

  - name : Check Out AA from git
    become_user: "{{ django_aa_user }}"
    git:
      repo: https://github.com/psipred/analytics_automated.git
      dest: "{{ django_aa_home }}analytics_automated"
      clone: yes
      force: yes

  - name: Install requirements
    become_user: "{{ django_aa_user }}"
    pip:
      chdir: "{{ django_aa_home }}"
      virtualenv: "{{ django_aa_home }}aa_env"
      virtualenv_command: /bin/virtualenv
      virtualenv_python: "{{ django_aa_home }}aa_env/bin/python"
      requirements: "{{ django_aa_home }}analytics_automated/requirements/{{ my_env }}.txt"

  - name: Copy aa django conf
    become_user: "{{ django_aa_user }}"
    copy:
      src: secrets/{{ my_env }}.py
      dest: "{{ django_aa_home }}/analytics_automated/analytics_automated_project/settings/"
      owner: "{{ django_aa_user }}"

  - name: Copy aa env secrets
    become_user: "{{ django_aa_user }}"
    copy:
      src: secrets/{{ my_env }}_secrets.json
      dest: "{{ django_aa_home }}/analytics_automated/analytics_automated_project/settings/"
      owner: "{{ django_aa_user }}"

  - name: Copy aa base secrets
    become_user: "{{ django_aa_user }}"
    copy:
      src: secrets/base_secrets.json
      dest: "{{ django_aa_home }}/analytics_automated/analytics_automated_project/settings/"
      owner: "{{ django_aa_user }}"

  - name: Copy wsgi.py
    become_user: "{{ django_aa_user }}"
    copy:
      src: files/{{ my_env }}/wsgi.py
      dest: "{{ django_aa_home }}/analytics_automated/analytics_automated_project/"
      owner: "{{ django_aa_user }}"

  - name: copy over the celery file
    become_user: "{{ django_aa_user }}"
    copy:
      src: files/{{ my_env }}/celery.py
      dest: "{{ django_aa_home }}/analytics_automated/analytics_automated_project/"
      owner: "{{ django_aa_user }}"

  - name: Make aa logging dir
    become_user: "{{ django_aa_user }}"
    file:
      path: "{{ django_aa_home }}/analytics_automated/logs"
      state: directory
      owner: "{{ django_aa_user }}"

  - name: Make jointly visible submissions dir on the NFS
    file:
      path: "/webdata/submissions"
      state: directory
      owner: "{{ django_aa_user }}"
      group: apache
      mode: "ug+rw"

  - name: Check if we have /webdata/submissions/files
    stat: "path=/webdata/submissions/files"
    become_user: root
    register: files_exists

  - name: move the files/ dir to submissions
    when: files_exists.stat.exists == False
    become_user: "{{ django_aa_user }}"
    command: "mv {{ django_aa_home }}/analytics_automated/submissions/files /webdata/submissions"

  - name: Check aa submissions
    stat: "path={{ django_aa_home }}/analytics_automated/submissions"
    become_user: "{{ django_aa_user }}"
    register: submissions_type

  - name: remove the submissions dir
    when: submissions_type.stat.isdir is defined and submissions_type.stat.isdir and submissions_type.stat.islink is not defined
    become_user: "{{ django_aa_user }}"
    file:
      path: "{{ django_aa_home }}analytics_automated/submissions"
      state: absent

  - name: symlink submissions to the aa dir STAGING
    become_user: "{{ django_aa_user }}"
    when: submissions_type.stat.isdir is defined and submissions_type.stat.isdir and submissions_type.stat.islink is not defined and my_env is match ("staging")
    file:
      src: /webdata/submissions
      dest: "{{ django_aa_home }}/analytics_automated/submissions"
      state: link
      owner: "{{ django_aa_user }}"
      group: apache
      mode: "ug+rw"

  - name: symlink submissions to the aa dir PRODUCTION
    become_user: "{{ django_aa_user }}"
    when: submissions_type.stat.isdir is defined and submissions_type.stat.isdir and submissions_type.stat.islink is not defined and my_env is match ("production")
    file:
      src: /webdata/production_submissions
      dest: "{{ django_aa_home }}/analytics_automated/production_submissions"
      state: link
      owner: "{{ django_aa_user }}"
      group: apache
      mode: "ug+rw"

  - name: Run Django migrations
    become_user: "{{ django_aa_user }}"
    django_manage:
      command: migrate
      virtualenv: "{{ django_aa_home }}aa_env/"
      settings: "analytics_automated_project.settings.{{ my_env }}"
      app_path: "{{ django_aa_home }}/analytics_automated/"

  - name: Run Django collect static
    become_user: "{{ django_aa_user }}"
    django_manage:
      command: collectstatic
      virtualenv: "{{ django_aa_home }}aa_env/"
      settings: "analytics_automated_project.settings.{{ my_env }}"
      app_path: "{{ django_aa_home }}/analytics_automated/"

  - name: Get the current list of processes
    shell: ps aux | grep httpd
    register: aa_running
    check_mode: no
    become_user: root
    become_method: sudo

  - name: Make the apachedir
    file:
      path: "{{ app_location }}/aa_httpd/"
      state: directory
      owner: "{{ django_aa_user }}"
      group: apache
    become_user: root
    become_method: sudo

  - name : Configure AA/Apache
    shell: "source {{ django_aa_home }}aa_env/bin/activate; python manage.py runmodwsgi --settings=analytics_automated_project.settings.{{ my_env }} --setup-only --user django_aa --group apache --threads=10 --processes=4 --reload-on-changes --server-root={{ app_location }}/aa_httpd/"
    args:
      chdir: "{{ django_aa_home }}analytics_automated"
    become_user: "{{ django_aa_user }}"
    register: aa_started
    when: aa_running.stdout.find("httpd (mod_wsgi-express)") == -1

  - name : add AA admin account
    shell: "source {{ django_aa_home }}aa_env/bin/activate; echo \"from django.contrib.auth.models import User; User.objects.filter(username='admin').delete(); User.objects.create_superuser('admin', 'a@b.com', '{{ aa_admin_pass }}')\" | python manage.py shell --settings=analytics_automated_project.settings.{{ my_env }}"
    args:
      chdir: "{{ django_aa_home }}analytics_automated"
    become_user: "{{ django_aa_user }}"

  - name: copy aa httpd conf
    become_user: root
    become_method: sudo
    when: my_env is match ("production")
    copy:
      src: files/{{ my_env }}/httpd.conf
      dest: /opt/aa_httpd
      mode: "uog+x"

  - name : Start aa
    shell: "/opt/aa_httpd/apachectl restart"
    become_user: "{{ django_aa_user }}"
    # when: aa_running.stdout.find("httpd (mod_wsgi-express)") == -1

  - name: copy over the aa head service
    become_user: root
    become_method: sudo
    copy:
      src: files/aahead.service
      dest: /etc/systemd/system/
      mode: "uog+x"

  - name: Add service to systemctl
    become_user: root
    become_method: sudo
    shell: systemctl enable aahead.service
